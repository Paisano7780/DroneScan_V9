plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    namespace 'com.dronescan.msdksample'
    compileSdk 34

    defaultConfig {
        applicationId "com.dronescan.msdksample"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        multiDexEnabled true
        
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    // Configurar nombre del APK
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "DroneScan_V9-${variant.buildType.name}-v${variant.versionName}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
            "-Xjvm-default=all"
        ]
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    // Configurar nombre del APK
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def formattedDate = new Date().format('yyyyMMdd')
            outputFileName = "DroneScan_V9-${variant.buildType.name}-v${variant.versionName}.apk"
        }
    }

    packagingOptions {
        pickFirst 'lib/*/libdjivideo.so'
        pickFirst 'lib/*/libSDKRelativeJNI.so'
        pickFirst 'lib/*/libFlyForbid.so'
        pickFirst 'lib/*/libduml_vision_bokeh.so'
        pickFirst 'lib/*/libyuv2.so'
        pickFirst 'lib/*/libc++_shared.so'
        pickFirst 'lib/*/libDJIFlySafeCore-CSDK.so'
        pickFirst 'lib/*/libdjifs_jni-CSDK.so'
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    
    // AndroidX
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.activity:activity-ktx:1.8.2'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'
    
    // DJI Mobile SDK V5
    implementation 'com.dji:dji-sdk-v5-aircraft:5.8.0'
    compileOnly 'com.dji:dji-sdk-v5-aircraft-provided:5.8.0'
    implementation 'com.dji:dji-sdk-v5-networkImp:5.8.0'
    
    // CameraX for video feed (optional, mainly using DJI's own)
    implementation 'androidx.camera:camera-core:1.3.1'
    implementation 'androidx.camera:camera-camera2:1.3.1'
    implementation 'androidx.camera:camera-lifecycle:1.3.1'
    implementation 'androidx.camera:camera-view:1.3.1'
    
    // ML Kit for Barcode Scanning
    implementation 'com.google.mlkit:barcode-scanning:17.2.0'
    
    // ZXing for additional barcode support
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    implementation 'com.google.zxing:core:3.5.2'
    
    // RxJava (DJI SDK uses it)
    implementation 'io.reactivex.rxjava3:rxjava:3.1.8'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'
    
    // Gson for JSON serialization
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // Permissions
    implementation 'com.guolindev.permissionx:permissionx:1.7.1'
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    
    // Multidex
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Tarea para copiar el APK a la raíz del proyecto
android.applicationVariants.all { variant ->
    variant.assemble.doLast {
        variant.outputs.all { output ->
            def apkFile = output.outputFile
            if (apkFile != null && apkFile.exists()) {
                def rootDir = project.rootProject.projectDir
                def destFile = new File(rootDir, "DroneScan_V9-${variant.buildType.name}.apk")
                println "Copiando APK a: ${destFile.absolutePath}"
                destFile.bytes = apkFile.bytes
                println "✅ APK copiado exitosamente: ${destFile.name} (${destFile.length() / 1024 / 1024} MB)"
            }
        }
    }
}
